 Explain the following questions in your own words
1. What is the difference between some() and every()? Explain these using your own words.
=>
  Difference between some() and every():
a. The `some()` and `every()` methods are used on arrays in JavaScript to check  the elements against a condition.
   The main difference between them is how they evaluate the elements.
b.`some()` returns `true` if at least one array element satisfies the condition specified by the provided callback function. 
   It stops looping through the array after finding a matching element and immediately returns "true".
   If no element satisfies the condition, it will return "false".
c. On the other hand, `every()` returns `true` only if all elements of the array satisfy the condition. 
   It loops through each element of the array and checks if the condition is met for each element. 
   If an element does not meet the condition, it immediately returns "false". 
   It only returns "true" if all elements satisfy the condition.


2- Explain the difference between the spread operator and the rest parameter in JavaScript.
=>
The spread operator is used to expand elements. It allows us to split an array or object into individual elements.

*When used with an array, the spread operator expands the elements of an array into individual values. 
*It can be used to create a new array or pass array elements as individual arguments to a function.

const arr = [1, 2, 3];
const newArr = [...arr]; // Creates a new array with the same elements
console.log(newArr); // Output: [1, 2, 3]

const sum = (a, b, c) => a + b + c;
console.log(sum(...arr));

Rest Parameter=> 
a. The rest parameter is used to represent multiple function arguments or remaining elements in an array. It allows you to capture a varying number of arguments into a single array.

b. When used as a function parameter, the rest parameter allows you to pass any number of arguments to a function. The arguments are automatically collected into an array.

function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}
console.log(sum(1, 2, 3, 4, 5)); // Output: 15

c. In array destructuring, the rest parameter allows you to collect the remaining elements of an array into a new array

const [first, second, ...rest] = [1, 2, 3, 4, 5];
console.log(first); // Output: 1
console.log(second); // Output: 2
console.log(rest); // Output: [3, 4, 5]

3. Explain the difference between splice() and slice() in JavaScript arrays.
=>
Slice():-
a. The slice() method is used to create a new array that contains a shallow copy of a portion of the original array. 
b. The slice() method does not modify the original array; instead, it returns a new array 
c. It returns new array
It has the following syntax:
syntax:-
array.slice(start, end)

splice():-
a. The splice() method is used to modify an array by adding, removing, or replacing elements within the array. It has the following syntax:
b. The splice() method modify the original array.
c. It returns same updated array
syntax:-
array.splice(start, deleteCount, item1, item2, ...)


4. If you need to remove an object element from an array by its index, which method do you prefer to use: splice() or filter()? Explain.

=>
a. If i want to remove an object element from an array by its index, I will use the splice() method. because,
  using splice() method, i know the index of the element and i want to remove it. 
  It directly removes the element from the array at the specified index. 
  This method modifies the original array itself.
b. When we use filter() to remove elements based on a condition or specific criteria. 
  It creates a new array by filtering out elements that do not meet the provided condition. 
  This method does not modify the original array; it returns a new array with the filtered elements.

* In the case of removing an object element by its index, splice() is more straightforward and efficient. 
  It allows us to directly target and remove the element at the specific index. 
  On the other hand, using filter() would require additional logic to check the index, 
  making it less suitable and less efficient in this scenario.


5. Explain the difference between `null` and `undefined` in JavaScript.
=>
 The difference between null and undefined in JavaScript:
a. null: In JavaScript, null is a value that represents an intentional absence of an object's value.
   This is often used to indicate that a variable or property has intentionally no value or has been intentionally assigned a null value.
   It is a primitive value and can be explicitly assigned to a variable.
* Example usage of null:
 let myVariable = null; // Explicitly assigning null to a variable
b. Undefined: In JavaScript, undefined is a value that represents an uninitialized, missing, or undefined variable or property. 
   This indicates that a variable or property has been declared but not assigned a value. 
   undefined is the default value of variables that are declared but not explicitly assigned a different value.
* Example usage of undefined:
  let myVariable; // Declaring a variable without assigning a value, it will be undefined by default
  console.log(myVariable); // Output: undefined
  let myObject = {}; // Declaring an object without specifying a property
  console.log(myObject.property); // Output: undefined (property is not assigned a value)
In summary, null indicates the intentional absence of an object value, while undefined represents an uninitialized variable or undefined property.
null is assigned explicitly, while undefined is the default value for uninitialized variables or undefined properties.
They both indicate the absence of a meaningful value, but are used in different contexts in JavaScript.












